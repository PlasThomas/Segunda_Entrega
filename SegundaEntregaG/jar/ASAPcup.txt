package ASAP;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {:
    private static ArrayList<String> messages = new ArrayList<String>();

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
          Symbol symbol = (Symbol) info;
          messages.add("Error: " + message + " at line " + (symbol.left + 1) + ", column " + symbol.right);
        } else {
          messages.add("Error: " + message);
        }
      }

      @Override
      public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException(message); // Detener el an√°lisis en caso de error fatal
    }

    public static void addMessage(String message) {
        messages.add(message);
    }

    public ArrayList<String> getMessages() {
      return messages;
    }

    public void clearMessage() {
            messages.clear();
    }
:};

terminal VAR, DOSP, PYCOMA, COMA, INTEGER, BOOLEAN;
terminal String ID;

non terminal S, D, V, T;

start with S;

S ::=  D   {: addMessage("Analisis completado\n"); :};

D ::=  VAR V DOSP T PYCOMA   {: addMessage("Declaracion encoantrada"); :};

V ::=   ID COMA V  {: addMessage("Variable"; :}
|
    ID    {: addMessage("Variable"; :};

T ::=   INTEGER {: addMessage("Tipo: integer"); :}
|
    BOOLEAN {: addMessage("Tipo: boolean"); :};